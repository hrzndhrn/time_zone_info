defmodule TimeZoneInfo.ExternalTermFormatTest do
  use ExUnit.Case, async: true

  alias TimeZoneInfo.ExternalTermFormat

  @term %{
    version: "2019c",
    links: %{
      "Europe/Guernsey" => "Europe/London",
      "Europe/Isle_of_Man" => "Europe/London",
      "Europe/Jersey" => "Europe/London"
    },
    rules: %{
      "EU" => [
        {{10, [last_day_of_week: 7], {1, 0, 0}}, :utc, 0, nil},
        {{3, [last_day_of_week: 7], {1, 0, 0}}, :utc, 3600, "S"}
      ]
    },
    time_zones: %{
      "Europe/London" => [
        {63_802_861_200, {0, "EU", {:choice, ["GMT", "BST"]}}},
        {60_475_255_200, {0, 3600, "BST", {~N[1916-05-21 03:00:00], ~N[1916-10-01 03:00:00]}}},
        {58_314_556_875, {0, 0, "GMT", {~N[1847-12-01 00:01:15], ~N[1916-05-21 02:00:00]}}},
        {0, {-75, 0, "LMT", {:min, ~N[1847-12-01 00:00:00]}}}
      ]
    }
  }

  @binary <<131, 80, 0, 0, 4, 227, 120, 218, 197, 148, 207, 78, 27, 49, 16, 198, 103, 255, 17,
            154, 150, 4, 21, 250, 16, 92, 160, 237, 5, 245, 218, 18, 69, 32, 40, 135, 164, 231,
            149, 177, 29, 217, 97, 215, 174, 188, 94, 32, 136, 43, 119, 36, 142, 92, 120, 9, 158,
            162, 167, 94, 251, 24, 125, 129, 48, 179, 217, 134, 32, 133, 74, 168, 141, 184, 172,
            119, 63, 207, 204, 247, 155, 177, 214, 30, 0, 98, 1, 73, 166, 205, 113, 225, 241, 35,
            202, 241, 209, 238, 148, 206, 126, 151, 91, 221, 82, 58, 83, 200, 17, 105, 43, 181,
            182, 111, 141, 176, 134, 148, 183, 181, 178, 91, 100, 50, 181, 131, 244, 128, 153,
            249, 129, 127, 148, 61, 233, 230, 22, 67, 127, 87, 102, 178, 242, 15, 104, 59, 236,
            124, 203, 104, 81, 177, 138, 88, 147, 94, 3, 21, 10, 88, 205, 88, 225, 83, 193, 70,
            228, 118, 42, 229, 49, 107, 12, 49, 32, 96, 192, 64, 64, 84, 122, 94, 173, 70, 103,
            85, 98, 244, 140, 196, 35, 128, 214, 42, 89, 7, 189, 161, 128, 166, 215, 185, 76, 207,
            173, 153, 97, 122, 140, 76, 165, 99, 21, 154, 4, 174, 6, 191, 127, 181, 176, 24, 212,
            224, 228, 183, 196, 149, 213, 92, 86, 61, 144, 28, 117, 15, 250, 213, 250, 185, 215,
            31, 86, 89, 183, 27, 55, 235, 45, 21, 51, 152, 26, 211, 158, 10, 201, 238, 21, 2, 164,
            105, 225, 93, 201, 125, 154, 10, 88, 239, 100, 250, 76, 187, 205, 175, 76, 159, 200,
            29, 230, 101, 31, 233, 4, 44, 115, 150, 73, 35, 152, 19, 176, 86, 71, 124, 169, 149,
            205, 221, 222, 33, 246, 133, 13, 179, 119, 2, 57, 109, 233, 88, 36, 224, 117, 174,
            185, 179, 133, 228, 216, 130, 10, 39, 205, 47, 229, 218, 148, 94, 210, 107, 146, 91,
            227, 21, 75, 80, 156, 196, 144, 24, 143, 36, 115, 8, 217, 184, 248, 239, 104, 193,
            179, 209, 154, 79, 160, 85, 35, 253, 113, 249, 243, 122, 133, 70, 58, 57, 10, 154,
            249, 2, 230, 57, 133, 134, 191, 67, 7, 83, 232, 55, 15, 208, 237, 25, 232, 237, 197,
            29, 117, 248, 175, 71, 77, 25, 42, 62, 26, 143, 199, 119, 245, 48, 247, 105, 152, 232,
            131, 37, 94, 108, 164, 48, 111, 164, 179, 220, 219, 248, 235, 54, 78, 240, 146, 209,
            147, 123, 39, 249, 248, 254, 195, 39, 126, 15, 19, 5, 104, 150>>

  describe "encode/1" do
    test "encodes data" do
      assert ExternalTermFormat.encode(@term) == {:ok, @binary}
    end

    test "returns an error tuple for invalid data" do
      assert ExternalTermFormat.encode("foo") == {:error, :invalid_data}
    end

    test "returns an error tuple for missing key" do
      term = Map.delete(@term, :links)
      assert ExternalTermFormat.encode(term) == {:error, :invalid_keys}
    end

    test "returns an error tuple for an invalid version" do
      term = Map.put(@term, :version, 5)
      assert ExternalTermFormat.encode(term) == {:error, :invalid_version}
    end
  end

  describe "decode/1" do
    test "decodes binary" do
      assert ExternalTermFormat.decode(@binary) == {:ok, @term}
    end
  end
end
