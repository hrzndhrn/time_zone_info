defmodule TimeZoneInfo.TransformerTest do
  use ExUnit.Case, async: true

  alias TimeZoneInfo.IanaParser
  alias TimeZoneInfo.Transformer

  require Logger

  setup_all do
    path = "test/temp/iana"

    files = [
      "africa",
      "antarctica",
      "asia",
      "australasia",
      "backward",
      "etcetera",
      "europe",
      "northamerica",
      "southamerica"
    ]

    config = [lookahead: 10, files: files, time_zones: :all]
    data = path |> parse(files) |> Transformer.transform("2000t", config)

    %{data: data}
  end

  describe "transform/1" do
    test "returns transformed data with %z zone abbr format" do
      input = """
      Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1912 Jan 01  2:00u # Praia
            -2:00	-	%z	1942 Sep
            -2:00	1:00	%z	1945 Oct 15
            -2:00	-	%z	1975 Nov 25  2:00
            -1:00	-	%z
      """

      config = [lookahead: 1, files: [], time_zones: :all]

      assert {:ok, parsed} = IanaParser.parse(input)

      parsed
      |> Transformer.transform("2000t", config)
      |> assert_time_zone("Atlantic/Cape_Verde", [
        {~N[1975-11-25 04:00:00], {-3600, 0, "-01"}},
        {~N[1945-10-15 01:00:00], {-7200, 0, "-02"}},
        {~N[1942-09-01 02:00:00], {-7200, 3600, "-01"}},
        {~N[1912-01-01 02:00:00], {-7200, 0, "-02"}},
        {~N[0000-01-01 00:00:00], {-5644, 0, "LMT"}}
      ])
    end

    test "returns transformed data for time zone Africa/Algiers", %{data: data} do
      assert_time_zone(data, "Africa/Algiers", [
        [
          {~N[1981-05-01 00:00:00], {3600, 0, "CET"}},
          {~N[1980-10-31 01:00:00], {0, 0, "WET"}},
          {~N[1980-04-25 00:00:00], {0, 3600, "WEST"}},
          {~N[1979-10-25 23:00:00], {0, 0, "WET"}},
          {~N[1978-09-22 01:00:00], {3600, 0, "CET"}},
          {~N[1978-03-24 00:00:00], {3600, 3600, "CEST"}},
          {~N[1977-10-20 23:00:00], {3600, 0, "CET"}},
          {~N[1977-05-06 00:00:00], {0, 3600, "WEST"}},
          {~N[1971-09-26 23:00:00], {0, 0, "WET"}}
        ],
        [
          {~N[1916-06-14 23:00:00], {0, 3600, "WEST"}},
          {~N[1911-03-10 23:50:39], {0, 0, "WET"}},
          {~N[1891-03-15 23:47:48], {561, 0, "PMT"}},
          {~N[0000-01-01 00:00:00], {732, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Adak", %{data: data} do
      assert_time_zone(data, "America/Adak", [
        [
          {~N[1984-04-29 12:00:00], {-36000, 3600, "HDT"}},
          {~N[1983-11-30 10:00:00], {-36000, 0, "HST"}},
          {~N[1983-10-30 12:00:00], {-36000, 0, "AHST"}},
          {~N[1983-04-24 13:00:00], {-39600, 3600, "BDT"}},
          {~N[1982-10-31 12:00:00], {-39600, 0, "BST"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Cancun", %{data: data} do
      assert_time_zone(data, "America/Cancun", [
        [
          {~N[2015-02-01 08:00:00], {-18000, 0, "EST"}},
          {~N[2014-10-26 07:00:00], {-21600, 0, "CST"}},
          {~N[2014-04-06 08:00:00], {-21600, 3600, "CDT"}},
          {~N[2013-10-27 07:00:00], {-21600, 0, "CST"}},
          {~N[2013-04-07 08:00:00], {-21600, 3600, "CDT"}}
        ],
        [
          {~N[2000-10-29 07:00:00], {-21600, 0, "CST"}},
          {~N[2000-04-02 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1999-10-31 07:00:00], {-21600, 0, "CST"}},
          {~N[1999-04-04 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1998-10-25 07:00:00], {-21600, 0, "CST"}},
          {~N[1998-08-02 06:00:00], {-21600, 3600, "CDT"}},
          {~N[1998-04-05 07:00:00], {-18000, 3600, "EDT"}},
          {~N[1997-10-26 07:00:00], {-18000, 0, "EST"}},
          {~N[1997-04-06 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1996-10-27 07:00:00], {-21600, 0, "CST"}},
          {~N[1996-04-07 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1983-01-04 05:00:00], {-21600, 0, "CST"}},
          {~N[1981-12-26 08:00:00], {-18000, 0, "EST"}},
          {~N[1922-01-01 06:00:00], {-21600, 0, "CST"}},
          {~N[0000-01-01 00:00:00], {-20824, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Dawson", %{data: data} do
      assert_time_zone(data, "America/Dawson", [
        [
          {~N[2020-11-01 07:00:00], {-25200, 0, "MST"}},
          {~N[2020-03-08 10:00:00], {-28800, 3600, "PDT"}},
          {~N[2019-11-03 09:00:00], {-28800, 0, "PST"}},
          {~N[2019-03-10 10:00:00], {-28800, 3600, "PDT"}},
          {~N[2018-11-04 09:00:00], {-28800, 0, "PST"}}
        ],
        [
          {~N[1918-10-27 10:00:00], {-32400, 0, "YST"}},
          {~N[1918-04-14 11:00:00], {-32400, 3600, "YDT"}},
          {~N[1900-08-20 09:17:40], {-32400, 0, "YST"}},
          {~N[0000-01-01 00:00:00], {-33460, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Indiana/Knox", %{data: data} do
      assert_time_zone(data, "America/Indiana/Knox", [
        [
          {~N[1918-03-31 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1883-11-18 18:00:00], {-21600, 0, "CST"}},
          {~N[0000-01-01 00:00:00], {-20790, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Indiana/Tell_City", %{data: data} do
      assert_time_zone(data, "America/Indiana/Tell_City", [
        [
          {~N[1968-04-28 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1967-10-29 07:00:00], {-21600, 0, "CST"}},
          {~N[1964-04-26 08:00:00], {-18000, 0, "EST"}}
        ],
        [
          {~N[1918-03-31 08:00:00], {-21600, 3600, "CDT"}},
          {~N[1883-11-18 18:00:00], {-21600, 0, "CST"}},
          {~N[0000-01-01 00:00:00], {-20823, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Indiana/Winamac", %{data: data} do
      assert_time_zone(data, "America/Indiana/Winamac", [
        [
          {~N[2008-11-02 06:00:00], {-18000, 0, "EST"}},
          {~N[2008-03-09 07:00:00], {-18000, 3600, "EDT"}},
          {~N[2007-11-04 06:00:00], {-18000, 0, "EST"}},
          {~N[2007-03-11 08:00:00], {-18000, 3600, "EDT"}},
          {~N[2006-10-29 07:00:00], {-21600, 0, "CST"}},
          {~N[2006-04-02 07:00:00], {-21600, 3600, "CDT"}},
          {~N[1970-10-25 06:00:00], {-18000, 0, "EST"}},
          {~N[1970-04-26 07:00:00], {-18000, 3600, "EDT"}},
          {~N[1969-10-26 06:00:00], {-18000, 0, "EST"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Juneau", %{data: data} do
      assert_time_zone(data, "America/Juneau", [
        [
          {~N[1984-10-28 10:00:00], {-32400, 0, "AKST"}},
          {~N[1984-04-29 11:00:00], {-32400, 3600, "AKDT"}},
          {~N[1983-11-30 09:00:00], {-32400, 0, "AKST"}},
          {~N[1983-10-30 09:00:00], {-32400, 0, "YST"}},
          {~N[1983-04-24 10:00:00], {-28800, 3600, "PDT"}},
          {~N[1982-10-31 09:00:00], {-28800, 0, "PST"}},
          {~N[1982-04-25 10:00:00], {-28800, 3600, "PDT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Montevideo", %{data: data} do
      assert_time_zone(data, "America/Montevideo", [
        [
          {~N[1976-12-19 03:00:00], {-10800, 3600, "-02"}},
          {~N[1975-03-30 02:00:00], {-10800, 0, "-03"}},
          {~N[1974-12-22 03:00:00], {-10800, 3600, "-02"}},
          {~N[1974-09-01 02:30:00], {-10800, 0, "-03"}},
          {~N[1974-03-10 01:30:00], {-10800, 1800, "-0230"}},
          {~N[1974-01-13 03:00:00], {-10800, 5400, "-0130"}},
          {~N[1972-07-16 02:00:00], {-10800, 0, "-03"}}
        ],
        [
          {~N[1959-05-24 03:00:00], {-10800, 1800, "-0230"}},
          {~N[1943-03-14 02:30:00], {-10800, 0, "-03"}},
          {~N[1942-12-14 03:00:00], {-10800, 1800, "-0230"}},
          {~N[1941-08-01 03:30:00], {-12600, 1800, "-03"}},
          {~N[1941-03-30 03:00:00], {-12600, 0, "-0330"}}
        ],
        [
          {~N[1924-10-01 03:30:00], {-12600, 1800, "-03"}},
          {~N[1924-04-01 03:00:00], {-12600, 0, "-0330"}},
          {~N[1923-10-01 04:00:00], {-12600, 1800, "-03"}},
          {~N[1920-05-01 03:44:51], {-14400, 0, "-04"}},
          {~N[1908-06-10 03:44:51], {-13491, 0, "MMT"}},
          {~N[0000-01-01 00:00:00], {-13491, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Santiago", %{data: data} do
      assert_time_zone(data, "America/Santiago", [
        [
          {~N[1929-09-01 05:00:00], {-18000, 3600, "-04"}},
          {~N[1929-04-01 04:00:00], {-18000, 0, "-05"}},
          {~N[1928-09-01 05:00:00], {-18000, 3600, "-04"}},
          {~N[1928-04-01 04:00:00], {-18000, 0, "-05"}},
          {~N[1927-09-01 04:42:45], {-18000, 3600, "-04"}},
          {~N[1919-07-01 04:00:00], {-16965, 0, "SMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone America/Sao_Paulo", %{data: data} do
      assert_time_zone(data, "America/Sao_Paulo", [
        [
          {~N[1966-03-01 02:00:00], {-10800, 0, "-03"}},
          {~N[1965-12-01 03:00:00], {-10800, 3600, "-02"}},
          {~N[1965-03-31 02:00:00], {-10800, 0, "-03"}},
          {~N[1965-01-31 03:00:00], {-10800, 3600, "-02"}},
          {~N[1964-03-01 02:00:00], {-10800, 0, "-03"}},
          {~N[1963-10-23 03:00:00], {-10800, 3600, "-02"}},
          {~N[1953-03-01 02:00:00], {-10800, 0, "-03"}},
          {~N[1952-12-01 03:00:00], {-10800, 3600, "-02"}}
        ],
        [
          {~N[1931-10-03 14:00:00], {-10800, 3600, "-02"}},
          {~N[1914-01-01 03:06:28], {-10800, 0, "-03"}},
          {~N[0000-01-01 00:00:00], {-11188, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Antarctica/Macquarie", %{data: data} do
      assert_time_zone(data, "Antarctica/Macquarie", [
        [
          {~N[1967-09-30 16:00:00], {36000, 3600, "AEDT"}},
          {~N[1948-03-25 00:00:00], {36000, 0, "AEST"}},
          {~N[1919-03-31 14:00:00], {0, 0, "-00"}},
          {~N[1917-03-24 16:00:00], {36000, 0, "AEST"}},
          {~N[1916-09-30 16:00:00], {36000, 3600, "AEDT"}},
          {~N[1899-11-01 00:00:00], {36000, 0, "AEST"}},
          {~N[0000-01-01 00:00:00], {0, 0, "-00"}}
        ]
      ])
    end

    test "returns transformed data for time zone Asia/Aqtau", %{data: data} do
      assert_time_zone(data, "Asia/Aqtau", [
        [
          {~N[2004-10-30 22:00:00], {18000, 0, "+05"}},
          {~N[2004-03-27 22:00:00], {14400, 3600, "+05"}},
          {~N[2003-10-25 22:00:00], {14400, 0, "+04"}}
        ],
        [
          {~N[1997-10-25 22:00:00], {14400, 0, "+04"}},
          {~N[1997-03-29 22:00:00], {14400, 3600, "+05"}},
          {~N[1996-10-26 22:00:00], {14400, 0, "+04"}},
          {~N[1996-03-30 22:00:00], {14400, 3600, "+05"}},
          {~N[1995-09-23 22:00:00], {14400, 0, "+04"}},
          {~N[1995-03-25 22:00:00], {14400, 3600, "+05"}},
          {~N[1994-09-24 21:00:00], {14400, 0, "+04"}},
          {~N[1994-03-26 21:00:00], {18000, 3600, "+06"}},
          {~N[1993-09-25 21:00:00], {18000, 0, "+05"}}
        ]
      ])
    end

    test "returns transformed data for time zone Asia/Tbilisi", %{data: data} do
      assert_time_zone(data, "Asia/Tbilisi", [
        [
          {~N[2005-03-26 23:00:00], {14400, 0, "+04"}},
          {~N[2004-10-30 23:00:00], {10800, 0, "+03"}},
          {~N[2004-06-26 19:00:00], {10800, 3600, "+04"}},
          {~N[2004-03-27 20:00:00], {14400, 3600, "+05"}},
          {~N[2003-10-25 19:00:00], {14400, 0, "+04"}},
          {~N[2003-03-29 20:00:00], {14400, 3600, "+05"}},
          {~N[2002-10-26 19:00:00], {14400, 0, "+04"}},
          {~N[2002-03-30 20:00:00], {14400, 3600, "+05"}},
          {~N[2001-10-27 19:00:00], {14400, 0, "+04"}},
          {~N[2001-03-24 20:00:00], {14400, 3600, "+05"}},
          {~N[2000-10-28 19:00:00], {14400, 0, "+04"}},
          {~N[2000-03-25 20:00:00], {14400, 3600, "+05"}},
          {~N[1999-10-30 19:00:00], {14400, 0, "+04"}},
          {~N[1999-03-27 20:00:00], {14400, 3600, "+05"}},
          {~N[1998-10-24 19:00:00], {14400, 0, "+04"}},
          {~N[1998-03-28 20:00:00], {14400, 3600, "+05"}},
          {~N[1997-10-25 19:00:00], {14400, 0, "+04"}},
          {~N[1996-03-30 20:00:00], {14400, 3600, "+05"}},
          {~N[1995-09-23 19:00:00], {14400, 0, "+04"}},
          {~N[1995-03-25 20:00:00], {14400, 3600, "+05"}},
          {~N[1994-09-24 20:00:00], {14400, 0, "+04"}},
          {~N[1994-03-26 21:00:00], {10800, 3600, "+04"}}
        ],
        [
          {~N[1981-09-30 19:00:00], {14400, 0, "+04"}},
          {~N[1981-03-31 20:00:00], {14400, 3600, "+05"}},
          {~N[1957-02-28 21:00:00], {14400, 0, "+04"}},
          {~N[1924-05-01 21:00:49], {10800, 0, "+03"}},
          {~N[1879-12-31 21:00:49], {10751, 0, "TBMT"}},
          {~N[0000-01-01 00:00:00], {10751, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Asia/Tehran", %{data: data} do
      assert_time_zone(data, "Asia/Tehran", [
        [
          {~N[1980-09-22 19:30:00], {12600, 0, "+0330"}},
          {~N[1980-03-20 20:30:00], {12600, 3600, "+0430"}},
          {~N[1979-09-18 19:30:00], {12600, 0, "+0330"}},
          {~N[1979-05-26 20:30:00], {12600, 3600, "+0430"}},
          {~N[1978-12-31 20:00:00], {12600, 0, "+0330"}},
          {~N[1978-08-04 20:00:00], {14400, 0, "+04"}},
          {~N[1978-03-24 20:00:00], {14400, 3600, "+05"}},
          {~N[1977-10-20 19:30:00], {14400, 0, "+04"}},
          {~N[1977-03-21 19:30:00], {12600, 3600, "+0430"}},
          {~N[1935-06-12 20:34:16], {12600, 0, "+0330"}},
          {~N[1915-12-31 20:34:16], {12344, 0, "TMT"}},
          {~N[0000-01-01 00:00:00], {12344, 0, "LMT"}}
        ],
        [
          {~N[2022-09-21 19:30:00], {12600, 0, "+0330"}},
          {~N[2022-03-21 20:30:00], {12600, 3600, "+0430"}},
          {~N[2021-09-21 19:30:00], {12600, 0, "+0330"}},
          {~N[2021-03-21 20:30:00], {12600, 3600, "+0430"}},
          {~N[2020-09-20 19:30:00], {12600, 0, "+0330"}},
          {~N[2020-03-20 20:30:00], {12600, 3600, "+0430"}},
          {~N[2019-09-21 19:30:00], {12600, 0, "+0330"}},
          {~N[2019-03-21 20:30:00], {12600, 3600, "+0430"}}
        ]
      ])
    end

    test "returns transformed data for time zone Asia/Shanghai", %{data: data} do
      assert_time_zone(data, "Asia/Shanghai", [
        {~N[1991-09-14 17:00:00], {28800, 0, "CST"}},
        {~N[1991-04-13 18:00:00], {28800, 3600, "CDT"}},
        {~N[1990-09-15 17:00:00], {28800, 0, "CST"}},
        {~N[1990-04-14 18:00:00], {28800, 3600, "CDT"}},
        {~N[1989-09-16 17:00:00], {28800, 0, "CST"}},
        {~N[1989-04-15 18:00:00], {28800, 3600, "CDT"}},
        {~N[1988-09-10 17:00:00], {28800, 0, "CST"}},
        {~N[1988-04-16 18:00:00], {28800, 3600, "CDT"}},
        {~N[1987-09-12 17:00:00], {28800, 0, "CST"}},
        {~N[1987-04-11 18:00:00], {28800, 3600, "CDT"}},
        {~N[1986-09-13 17:00:00], {28800, 0, "CST"}},
        {~N[1986-05-03 18:00:00], {28800, 3600, "CDT"}},
        {~N[1949-05-27 15:00:00], {28800, 0, "CST"}},
        {~N[1949-04-30 16:00:00], {28800, 3600, "CDT"}},
        {~N[1948-09-30 15:00:00], {28800, 0, "CST"}},
        {~N[1948-04-30 16:00:00], {28800, 3600, "CDT"}},
        {~N[1947-10-31 15:00:00], {28800, 0, "CST"}},
        {~N[1947-04-14 16:00:00], {28800, 3600, "CDT"}},
        {~N[1946-09-30 15:00:00], {28800, 0, "CST"}},
        {~N[1946-05-14 16:00:00], {28800, 3600, "CDT"}},
        {~N[1945-09-01 15:00:00], {28800, 0, "CST"}},
        {~N[1942-01-30 16:00:00], {28800, 3600, "CDT"}},
        {~N[1941-11-01 15:00:00], {28800, 0, "CST"}},
        {~N[1941-03-14 16:00:00], {28800, 3600, "CDT"}},
        {~N[1940-10-12 15:00:00], {28800, 0, "CST"}},
        {~N[1940-05-31 16:00:00], {28800, 3600, "CDT"}},
        {~N[1919-09-30 15:00:00], {28800, 0, "CST"}},
        {~N[1919-04-12 16:00:00], {28800, 3600, "CDT"}},
        {~N[1900-12-31 15:54:17], {28800, 0, "CST"}},
        {~N[0000-01-01 00:00:00], {29143, 0, "LMT"}}
      ])
    end

    test "returns transformed data for time zone Asia/Yekaterinburg", %{data: data} do
      assert_time_zone(data, "Asia/Yekaterinburg", [
        [
          {~N[2014-10-25 20:00:00], {18000, 0, "+05"}},
          {~N[2011-03-26 21:00:00], {21600, 0, "+06"}},
          {~N[2010-10-30 21:00:00], {18000, 0, "+05"}},
          {~N[2010-03-27 21:00:00], {18000, 3600, "+06"}}
        ],
        [
          {~N[1993-03-27 21:00:00], {18000, 3600, "+06"}},
          {~N[1992-09-26 21:00:00], {18000, 0, "+05"}},
          {~N[1992-03-28 21:00:00], {18000, 3600, "+06"}},
          {~N[1992-01-18 22:00:00], {18000, 0, "+05"}},
          {~N[1991-09-28 22:00:00], {14400, 0, "+04"}},
          {~N[1991-03-30 21:00:00], {14400, 3600, "+05"}},
          {~N[1990-09-29 21:00:00], {18000, 0, "+05"}},
          {~N[1990-03-24 21:00:00], {18000, 3600, "+06"}}
        ],
        [
          {~N[1981-09-30 18:00:00], {18000, 0, "+05"}},
          {~N[1981-03-31 19:00:00], {18000, 3600, "+06"}},
          {~N[1930-06-20 20:00:00], {18000, 0, "+05"}},
          {~N[1919-07-15 00:14:55], {14400, 0, "+04"}},
          {~N[1916-07-02 19:57:27], {13505, 0, "PMT"}},
          {~N[0000-01-01 00:00:00], {14553, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/Belgrade", %{data: data} do
      assert_time_zone(data, "Europe/Belgrade", [
        [
          {~N[1943-10-04 01:00:00], {3600, 0, "CET"}},
          {~N[1943-03-29 01:00:00], {3600, 3600, "CEST"}},
          {~N[1942-11-02 01:00:00], {3600, 0, "CET"}},
          {~N[1941-04-18 22:00:00], {3600, 3600, "CEST"}},
          {~N[1883-12-31 22:38:00], {3600, 0, "CET"}},
          {~N[0000-01-01 00:00:00], {4920, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/Berlin", %{data: data} do
      assert_time_zone(data, "Europe/Berlin", [
        [
          {~N[2034-10-29 01:00:00], {3600, "EU", {:template, "CE%sT"}}}
        ],
        [
          {~N[2025-03-30 01:00:00], {3600, 3600, "CEST"}},
          {~N[2024-10-27 01:00:00], {3600, 0, "CET"}},
          {~N[2024-03-31 01:00:00], {3600, 3600, "CEST"}},
          {~N[2023-10-29 01:00:00], {3600, 0, "CET"}},
          {~N[2023-03-26 01:00:00], {3600, 3600, "CEST"}},
          {~N[2022-10-30 01:00:00], {3600, 0, "CET"}},
          {~N[2022-03-27 01:00:00], {3600, 3600, "CEST"}},
          {~N[2021-10-31 01:00:00], {3600, 0, "CET"}},
          {~N[2021-03-28 01:00:00], {3600, 3600, "CEST"}}
        ],
        [
          {~N[1946-10-07 01:00:00], {3600, 0, "CET"}},
          {~N[1946-04-14 01:00:00], {3600, 3600, "CEST"}},
          {~N[1945-11-18 01:00:00], {3600, 0, "CET"}},
          {~N[1945-09-24 00:00:00], {3600, 3600, "CEST"}},
          {~N[1945-05-24 00:00:00], {3600, 7200, "CEMT"}},
          {~N[1945-04-02 01:00:00], {3600, 3600, "CEST"}},
          {~N[1944-10-02 01:00:00], {3600, 0, "CET"}},
          {~N[1944-04-03 01:00:00], {3600, 3600, "CEST"}},
          {~N[1943-10-04 01:00:00], {3600, 0, "CET"}},
          {~N[1943-03-29 01:00:00], {3600, 3600, "CEST"}},
          {~N[1942-11-02 01:00:00], {3600, 0, "CET"}},
          {~N[1940-04-01 01:00:00], {3600, 3600, "CEST"}}
        ],
        [
          {~N[1916-04-30 22:00:00], {3600, 3600, "CEST"}},
          {~N[1893-03-31 23:06:32], {3600, 0, "CET"}},
          {~N[0000-01-01 00:00:00], {3208, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/Dublin", %{data: data} do
      assert_time_zone(data, "Europe/Dublin", [
        [
          {~N[2034-10-29 01:00:00], {3600, "Eire", {:choice, ["IST", "GMT"]}}}
        ],
        [
          {~N[2025-03-30 01:00:00], {3600, 0, "IST"}},
          {~N[2024-10-27 01:00:00], {3600, -3600, "GMT"}},
          {~N[2024-03-31 01:00:00], {3600, 0, "IST"}},
          {~N[2023-10-29 01:00:00], {3600, -3600, "GMT"}},
          {~N[2023-03-26 01:00:00], {3600, 0, "IST"}},
          {~N[2022-10-30 01:00:00], {3600, -3600, "GMT"}},
          {~N[2022-03-27 01:00:00], {3600, 0, "IST"}},
          {~N[2021-10-31 01:00:00], {3600, -3600, "GMT"}},
          {~N[2021-03-28 01:00:00], {3600, 0, "IST"}},
          {~N[2020-10-25 01:00:00], {3600, -3600, "GMT"}}
        ],
        [
          {~N[1917-09-17 02:00:00], {0, 0, "GMT"}},
          {~N[1917-04-08 02:00:00], {0, 3600, "BST"}},
          {~N[1916-10-01 02:25:21], {0, 0, "GMT"}},
          {~N[1916-05-21 02:25:21], {-1521, 3600, "IST"}},
          {~N[1880-08-02 00:25:21], {-1521, 0, "DMT"}},
          {~N[0000-01-01 00:00:00], {-1521, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/Istanbul", %{data: data} do
      assert_time_zone(data, "Europe/Istanbul", [
        [
          {~N[2016-09-06 21:00:00], {10800, 0, "+03"}},
          {~N[2016-03-27 01:00:00], {7200, 3600, "EEST"}},
          {~N[2015-11-08 01:00:00], {7200, 0, "EET"}},
          {~N[2015-03-29 01:00:00], {7200, 3600, "EEST"}},
          {~N[2014-10-26 01:00:00], {7200, 0, "EET"}},
          {~N[2014-03-31 01:00:00], {7200, 3600, "EEST"}},
          {~N[2013-10-27 01:00:00], {7200, 0, "EET"}},
          {~N[2013-03-31 01:00:00], {7200, 3600, "EEST"}},
          {~N[2012-10-28 01:00:00], {7200, 0, "EET"}},
          {~N[2012-03-25 01:00:00], {7200, 3600, "EEST"}},
          {~N[2011-10-30 01:00:00], {7200, 0, "EET"}},
          {~N[2011-03-28 01:00:00], {7200, 3600, "EEST"}},
          {~N[2010-10-31 01:00:00], {7200, 0, "EET"}},
          {~N[2010-03-28 01:00:00], {7200, 3600, "EEST"}},
          {~N[2009-10-25 01:00:00], {7200, 0, "EET"}},
          {~N[2009-03-29 01:00:00], {7200, 3600, "EEST"}},
          {~N[2008-10-26 01:00:00], {7200, 0, "EET"}},
          {~N[2008-03-30 01:00:00], {7200, 3600, "EEST"}},
          {~N[2007-10-28 01:00:00], {7200, 0, "EET"}},
          {~N[2007-03-25 01:00:00], {7200, 3600, "EEST"}},
          {~N[2006-10-28 23:00:00], {7200, 0, "EET"}}
        ],
        [
          {~N[1985-04-19 23:00:00], {7200, 3600, "EEST"}},
          {~N[1984-10-31 23:00:00], {7200, 0, "EET"}},
          {~N[1983-10-01 22:00:00], {10800, 0, "+03"}},
          {~N[1983-07-30 23:00:00], {10800, 3600, "+04"}},
          {~N[1978-06-28 21:00:00], {10800, 0, "+03"}},
          {~N[1978-04-02 00:00:00], {7200, 3600, "EEST"}},
          {~N[1977-10-15 23:00:00], {7200, 0, "EET"}}
        ],
        [
          {~N[1916-04-30 22:00:00], {7200, 3600, "EEST"}},
          {~N[1910-09-30 22:03:04], {7200, 0, "EET"}},
          {~N[1879-12-31 22:04:08], {7016, 0, "IMT"}},
          {~N[0000-01-01 00:00:00], {6952, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/London", %{data: data} do
      assert_time_zone(data, "Europe/London", [
        [
          {~N[1997-10-26 01:00:00], {0, 0, "GMT"}},
          {~N[1997-03-30 01:00:00], {0, 3600, "BST"}},
          {~N[1996-10-27 01:00:00], {0, 0, "GMT"}},
          {~N[1996-03-31 01:00:00], {0, 3600, "BST"}},
          {~N[1995-10-22 01:00:00], {0, 0, "GMT"}},
          {~N[1995-03-26 01:00:00], {0, 3600, "BST"}}
        ],
        [
          {~N[1973-03-18 02:00:00], {0, 3600, "BST"}},
          {~N[1972-10-29 02:00:00], {0, 0, "GMT"}},
          {~N[1972-03-19 02:00:00], {0, 3600, "BST"}},
          {~N[1971-10-31 02:00:00], {0, 0, "GMT"}},
          {~N[1968-10-26 23:00:00], {3600, 0, "BST"}},
          {~N[1968-02-18 02:00:00], {0, 3600, "BST"}}
        ],
        [
          {~N[1916-10-01 02:00:00], {0, 0, "GMT"}},
          {~N[1916-05-21 02:00:00], {0, 3600, "BST"}},
          {~N[1847-12-01 00:01:15], {0, 0, "GMT"}},
          {~N[0000-01-01 00:00:00], {-75, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/Vienna", %{data: data} do
      assert_time_zone(data, "Europe/Vienna", [
        [
          {~N[2034-10-29 01:00:00], {3600, "EU", {:template, "CE%sT"}}}
        ],
        [
          {~N[2025-03-30 01:00:00], {3600, 3600, "CEST"}},
          {~N[2024-10-27 01:00:00], {3600, 0, "CET"}},
          {~N[2024-03-31 01:00:00], {3600, 3600, "CEST"}},
          {~N[2023-10-29 01:00:00], {3600, 0, "CET"}},
          {~N[2023-03-26 01:00:00], {3600, 3600, "CEST"}},
          {~N[2022-10-30 01:00:00], {3600, 0, "CET"}},
          {~N[2022-03-27 01:00:00], {3600, 3600, "CEST"}},
          {~N[2021-10-31 01:00:00], {3600, 0, "CET"}},
          {~N[2021-03-28 01:00:00], {3600, 3600, "CEST"}}
        ],
        [
          {~N[1947-10-05 01:00:00], {3600, 0, "CET"}},
          {~N[1947-04-06 01:00:00], {3600, 3600, "CEST"}},
          {~N[1946-10-07 01:00:00], {3600, 0, "CET"}},
          {~N[1946-04-14 01:00:00], {3600, 3600, "CEST"}},
          {~N[1945-04-12 01:00:00], {3600, 0, "CET"}},
          {~N[1945-04-02 01:00:00], {3600, 3600, "CEST"}},
          {~N[1944-10-02 01:00:00], {3600, 0, "CET"}},
          {~N[1944-04-03 01:00:00], {3600, 3600, "CEST"}}
        ],
        [
          {~N[1916-09-30 23:00:00], {3600, 0, "CET"}},
          {~N[1916-04-30 22:00:00], {3600, 3600, "CEST"}},
          {~N[1893-03-31 22:54:39], {3600, 0, "CET"}},
          {~N[0000-01-01 00:00:00], {3921, 0, "LMT"}}
        ]
      ])
    end

    test "returns transformed data for time zone Europe/Vilnius", %{data: data} do
      assert_time_zone(data, "Europe/Vilnius", [
        [
          {~N[2004-03-28 01:00:00], {7200, 3600, "EEST"}},
          {~N[2003-10-26 01:00:00], {7200, 0, "EET"}},
          {~N[2003-03-30 01:00:00], {7200, 3600, "EEST"}},
          {~N[1999-10-31 01:00:00], {7200, 0, "EET"}},
          {~N[1999-03-28 01:00:00], {3600, 3600, "CEST"}},
          {~N[1998-10-25 01:00:00], {3600, 0, "CET"}}
        ]
      ])
    end

    test "returns transformed data for time zone Atlantic/Cape_Verde", %{data: data} do
      assert_time_zone(data, "Atlantic/Cape_Verde", [
        {~N[1975-11-25 04:00:00], {-3600, 0, "-01"}},
        {~N[1945-10-15 01:00:00], {-7200, 0, "-02"}},
        {~N[1942-09-01 02:00:00], {-7200, 3600, "-01"}},
        {~N[1912-01-01 02:00:00], {-7200, 0, "-02"}},
        {~N[0000-01-01 00:00:00], {-5644, 0, "LMT"}}
      ])
    end
  end

  describe "transform/1 world" do
    test "keys", %{data: data} do
      assert Map.keys(data) |> Enum.sort() == [:config, :links, :rules, :time_zones, :version]
    end

    test "version", %{data: data} do
      assert Map.get(data, :version) == "2000t"
    end

    test "config", %{data: data} do
      assert config = Map.get(data, :config)
      assert config[:lookahead] == 10
      assert config[:time_zones] == :all

      assert config[:files] == [
               "africa",
               "antarctica",
               "asia",
               "australasia",
               "backward",
               "etcetera",
               "europe",
               "northamerica",
               "southamerica"
             ]
    end

    test "links", %{data: data} do
      assert Map.get(data.links, "Antarctica/McMurdo") == "Pacific/Auckland"
    end

    test "rules", %{data: data} do
      assert Map.get(data.rules, "EU") == [
               {{10, [last_day_of_week: 7], {1, 0, 0}}, :utc, 0, nil},
               {{3, [last_day_of_week: 7], {1, 0, 0}}, :utc, 3600, "S"}
             ]
    end
  end

  defp parse(path, file) do
    with {:ok, data} <- path |> data(file) |> IanaParser.parse(), do: data
  end

  defp data(path, files) do
    Enum.map_join(files, "\n", fn file -> path |> Path.join(file) |> File.read!() end)
  end

  defp to_naive(data) do
    Enum.map(data, fn
      {ts, {utc_offset, std_offset, zone_abbr, _wall}} ->
        # the wall part will be tested in time_zone_database_test
        {
          ts |> :calendar.gregorian_seconds_to_datetime() |> NaiveDateTime.from_erl!(),
          {utc_offset, std_offset, zone_abbr}
        }

      {ts, info} ->
        {
          ts |> :calendar.gregorian_seconds_to_datetime() |> NaiveDateTime.from_erl!(),
          info
        }
    end)
  end

  defp assert_time_zone(time_zones, time_zone, [item | _] = expected) when is_list(item) do
    time_zones
    |> get_time_zone(time_zone)
    |> to_naive()
    |> assert_sequences(expected)
  end

  defp assert_time_zone(time_zones, time_zone, expected) do
    assert time_zones |> get_in([:time_zones, time_zone]) |> to_naive() == expected
  end

  defp assert_sequences(data, sequences) do
    Enum.each(sequences, fn sequence -> assert_sequence(data, sequence) end)
  end

  defp assert_sequence(data, [element | _] = elements) do
    index =
      case Enum.find_index(data, fn x -> x == element end) do
        nil ->
          flunk(
            "can't find #{inspect(element)} in #{inspect(data, pretty: true, limit: :infinity)}"
          )

        index ->
          index
      end

    amount = length(elements)

    assert Enum.slice(data, index, amount) == elements
  end

  defp get_time_zone(time_zones, time_zone) do
    case get_in(time_zones, [:time_zones, time_zone]) do
      nil -> raise "time zone #{time_zone} not found"
      time_zone -> time_zone
    end
  end
end
